package com.itvgame.remotecontrol.client;

import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.OutputStream;

import javax.microedition.io.SocketConnection;

import com.clover4u.startup.GameSystem;
import com.clover4u.utils.Mtd;
import com.hst.game.GameScene;
import com.itvgame.remotecontrol.mina.proto.MobileConn;
import com.itvgame.remotecontrol.mina.proto.ProtoBase;
import com.itvgame.remotecontrol.mina.proto.STB_Conn;
import com.itvgame.remotecontrol.server.IoBuffer;
import com.itvgame.remotecontrol.server.Server;
import com.sun.midp.io.Properties;

public class ClientIoSession {

	public ClientIoSession(SocketConnection socket) {
		if (socket == null) {
			throw new NullPointerException("socket is null");
		}
		try {
			out = socket.openOutputStream();

			in = socket.openDataInputStream();
			ip = socket.getAddress();
			buffer = IoBuffer.allocate(1024, true);
			Client.handler.sessionOpened(this);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		this.socket = socket;
	}

	private String ip;
	private String charset = "UTF-8";
	private SocketConnection socket;
	private boolean sign = true;
	private OutputStream out;
	private DataInputStream in;
	private IoBuffer buffer;
	ProtoBase protobase;

	/*
	 * public void close() { try { socket.close(); } catch (IOException e) { //
	 * TODO Auto-generated catch block e.printStackTrace();
	 * Server.handler.exceptionCaught(IoSession.this, e); closeInOut(); }finally
	 * { Server.clientSocketQuenue.removeElement(IoSession.this); }
	 * 
	 * }
	 */

	public void checkMessage() {
		new Thread() {
            
			public void run() {
				// TODO Auto-generated method stub
				GameScene.msg.addElement("客户端：" + ip + "   监听信息开始。。" + GameSystem.getAppProperty("userid"));
				protobase = new STB_Conn("15820467346", "1", "1");
				try {
					byte[]  bytes = protobase.toByte();
					for(int i = 0; i < bytes.length; i++) {
					   	System.out.print(bytes[i]);
					}
					
					out.write(protobase.toByte());
					out.flush();
				} catch (IOException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
					GameScene.msg.addElement(
							ClientIoSession.this.getIp() + " 服务器id配对失败---");
					
				}
				GameScene.msg.addElement(ClientIoSession.this.getIp() + " 服务器id配对成功---");
				while (sign) {
					try {

						/** 各机顶盒通用 ***/
						
						byte[] b = new byte[in.available()];
						in.readFully(b);
						
//						buffer.put(a);
//						while ((a = in.readByte()) != '\n') {
//							dos.write(a);
//							buffer.put(a);
//						}
						// 解码器过滤

						Client.handler.messageReceived(ClientIoSession.this, b);
						
						// sendMsg("1");

						/** end ***/

						/*
						 * ByteArrayOutputStream dos = new
						 * ByteArrayOutputStream(); byte[] b = new byte[1024];
						 * 
						 * int len = -1; while((len = in.read(b)) > 0) {
						 * dos.write(b, 0, len); } b = dos.toByteArray();
						 */
						// if(b.length > 0) {
						/*
						 * in = socket.openDataInputStream(); out =
						 * socket.openDataOutputStream();
						 */

						/*
						 * if(in.available() > 0) { byte[] b = new
						 * byte[in.available()]; in.readFully(b);
						 * Server.handler.messageReceived(IoSession.this, b);
						 * out.write("ok\n".getBytes()); out.flush();
						 * 
						 * }else { Mtd.sleep(1); }
						 */

						// out.write(1);//给出回应
						// dos.close();
					} catch (IOException e) {
						// TODO Auto-generated catch block
						GameScene.msg.addElement(
								ClientIoSession.this.getIp() + " 服务器断开连接---");
						/*
						 * e.printStackTrace(); GameScene.msg.addElement("客户端" +
						 * IoSession.this.getIp() + " 断开连接"); Mtd.sleep(1000);
						 * Server.handler.exceptionCaught(IoSession.this, e);
						 * Server
						 * .clientSocketQuenue.removeElement(IoSession.this);
						 * //closeInOut(); sign = false;
						 */

						closeInOut();

					}
				}
			}
		}.start();

	}

	public SocketConnection getSocket() {
		return socket;
	}

	protected void closeInOut() {
		sign = false;
		if (out != null) {
			try {
				out.close();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		if (in != null) {
			try {
				in.close();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		if (socket != null) {
			try {
				socket.close();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	}

	public void sendMsg(String msg) {
		try {
			out.write((msg.getBytes()));
			out.flush();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			GameScene.msg.addElement("客户端" + ClientIoSession.this.getIp()
					+ " 断开连接 " + e.getMessage());
			closeInOut();
		}
	}

	public String getIp() {
		return ip;
	}

	public void setIp(String ip) {
		this.ip = ip;
	}
	
	
}
