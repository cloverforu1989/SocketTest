package com.itvgame.remotecontrol.client;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.UnsupportedEncodingException;
import java.util.Vector;
import javax.microedition.io.Connector;
import javax.microedition.io.ServerSocketConnection;
import javax.microedition.io.SocketConnection;

import com.hst.game.GameScene;
import com.hst.game.KeyObj;
import com.itvgame.remotecontrol.main.RemoteControlMain;
import com.itvgame.remotecontrol.main.RemoteKey;
import com.itvgame.remotecontrol.mina.proto.ProtoBase;
import com.itvgame.remotecontrol.mina.proto.RemoteControl;
import com.sun.midp.io.j2me.serversocket.Socket;

public class Client {
	public static SocketConnection clientSocket = null;
	public static boolean sign2 = true;
	public static final int MAX_CONNECTED_NUM = 2;
	private static int PORT = 11022;
	protected static long time = System.currentTimeMillis();
	protected static long aliveTime = System.currentTimeMillis();

	// public static final String replaceAll(String str, String regex,
	// String replacement) {
	// if (str == null || regex == null || replacement == null)
	// return str;
	// StringBuffer sb = new StringBuffer(str);
	// int index = -1;
	// while ((index = sb.toString().indexOf(regex)) != -1) {
	// sb.delete(index, index + regex.length());
	// sb.insert(index, replacement);
	// }
	// return sb.toString();
	// }

	public static ClientHandlerInter handler = new ClientHandlerInter() {

		public void exceptionCaught(ClientIoSession session, Throwable cause) {
			// TODO Auto-generated method stub

		}

		public void inputClosed(ClientIoSession session) {
			// TODO Auto-generated method stub

		}

		public void messageSent(ClientIoSession session, Object message) {
			// TODO Auto-generated method stub

		}

		public void sessionClosed(ClientIoSession session) {
			// TODO Auto-generated method stub

		}

		public void sessionCreated(ClientIoSession session) {
			// TODO Auto-generated method stub

		}

		public void sessionOpened(ClientIoSession session) {
			// TODO Auto-generated method stub

		}

		public void messageReceived(ClientIoSession session, byte[] message) {

			// TODO Auto-generated method stub
         
			Object[] objArr = ProtoBase.decode(message);
			System.out.println("=========================================");
			if (objArr != null) {
				for (int i = 0; i < objArr.length; i++) {
					Object obj = objArr[i];
					if (obj == null)
						return;
					if (obj instanceof ProtoBase) {
						ProtoBase protoBase = (ProtoBase) obj;
						if (protoBase != null && protoBase.id == ProtoBase.CLASS_RemoteControl) {
							RemoteControl rc = (RemoteControl) protoBase;
							RemoteControlMain.onKeyEvent(rc);
							try {
								Thread.sleep(2);
							} catch (InterruptedException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
						    //GameScene.addMsg(RemoteKey.getStr(rc.keyVal()) + " - " + rc.isPress());
							RemoteControlMain.log("msg", RemoteKey.getStr(rc.keyVal()) + " - " + rc.isPress());
						} else {
							RemoteControlMain.log("messageReceived=1=",protoBase.toString());
							//GameScene.addMsg("messageReceived=1="+ protoBase.toString());
							RemoteControlMain.log("msg", protoBase.toString());
						}

					} else {
						byte[] bb = (byte[])obj;
							try {
								
								RemoteControlMain.log("messageReceived=2=", new String((byte[])obj, "utf-8"));
							} catch (UnsupportedEncodingException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
							
								StringBuffer sb = new StringBuffer();
								
								sb.append("[");
								for(int j = 0; j < bb.length; j ++) {
									sb.append(bb[j]+" ");
								}
								sb.append("]");
								 //GameScene.addMsg(sb.toString());
								RemoteControlMain.log("msg", sb.toString());
							
						
					}

				}
			}
			System.out.println("=========================================");
		}
		
		
	};

	public static boolean sign = true;

	public Client() {
		while ((clientSocket = getClentSocket()) == null) {
			RemoteControlMain.log("Client115", "尝试重新连接");
			 //GameScene.addMsg("尝试重新连接");
		}
		;

	}

	private static SocketConnection getClentSocket() {
		SocketConnection clientSocket = null;
		try {
			clientSocket = (SocketConnection) Connector.open("socket://"
					+ RemoteControlMain.getIp() + ":" + PORT);
			clientSocket.setSocketOption(SocketConnection.DELAY, 0);
			clientSocket.setSocketOption(SocketConnection.LINGER, 5);
			clientSocket.setSocketOption(SocketConnection.KEEPALIVE, 0);
			clientSocket.setSocketOption(SocketConnection.RCVBUF, 512);
			clientSocket.setSocketOption(SocketConnection.SNDBUF, 128);

		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			// GameScene.msg.addElement(e.toString());
			RemoteControlMain.log("Client129", "socket 连接失败");
			 ////GameScene.addMsg("socket 连接失败");
		}
		return clientSocket;
	}

	public void start() {

		new Thread() {
			public synchronized void run() {

				ClientIoSession session = new ClientIoSession(clientSocket);
				handler.sessionCreated(session);
				//GameScene.addMsg("已经连接服务器。。。");
				RemoteControlMain.log("Client129", "已经连接服务器。。。");
				session.checkMessage();

			};
		}.start();

	}

	public final void disconnect() throws IOException {
		sign = false;
		synchronized (clientSocket) {

			if (clientSocket != null)
				clientSocket.close();

		}

	}
}
